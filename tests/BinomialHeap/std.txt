module std {

pub type vector :: (list , number).

pub ForEach(List,Func) :: (
    if Length <- Size(List) | Length = 0 then (
            []
        ) else (
            List <- [L | Ls];
            Rs <- ForEach(Ls,Func);
            R  <- Func(L);
            [R | Rs]
    )
)
.

pub Size(List) :: (
    if List = [] then (
        0
    ) else (
        List <- [L | Ls];
        X <- Size(Ls);
        X + 1
    )
)
.

pub Print(X) :: (
    write(X);
)
.

pub PrintLn(X) :: (
    std:Print(X);
    std:Print("\n");
)
.

pub Input() :: (
    read(X);
    X
)
.


pub Exit() :: ( halt; ).

pub Replace(List,Idx,NewVal) :: (
    ListSize <- Size(List);

    if Idx < 0 ; Idx > ListSize - 1 then (
        write('Wrong Idx');
        Exit();
    );

    if Idx = 0 then (
        if ListSize = 0 then (
            []
        ) else (
            List <- [L | Ls];
            [NewVal | Ls]
        )
    ) else (
        List <- [L | Ls]; 
        NewSubList <- Replace(Ls,Idx - 1, NewVal);
        [L | NewSubList]
    )
)
.



pub Max(X,Y) :: (
    if #1 >= #2 then #1 else #2 
)
.

pub Min(X,Y) :: (
    if #2 >= #1 then #1 else #2 
)
.

pub MinMember(List : std:list, MinFunc) :: (
    ListSize <- std:Size(List);

    match List {
        [] => nil,
        [X] => X,
        [X,Y] => MinFunc(X,Y),
        [L | Ls] => MinFunc(MinMember(Ls,MinFunc),L)
    }

)
.

pub RandomNum(Lower : number,Higher : number) :: (
    random(Lower,Higher,X);
    X
)
.

pub MakeList(Length : number, Value) :: (
    length(List,Length);
    maplist(=(Value),List);
    List
)
.

pub SortList(List : std:list) :: (
    msort(List,Result);
    Result
)
.



}

list(X) :- is_list(X).


