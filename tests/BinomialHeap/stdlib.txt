module std {

pub ForEach(List : list, Func) :: ( 
    match List {
        [] => [],
        [L | Ls] => [Func(L) | ForEach(Ls,Func)]
    }
)
.

pub Size(List : list) :: (
    match List {
        [] => 0,
        [_ | Ls] => (
            ListSize <- Size(Ls);
            ListSize + 1
        )
    }
)
.

pub Print(X) :: (
    write(X);
)
.

pub PrintLn(X) :: (
    std:Print(X);
    std:Print("\n");
)
.

pub Input() :: (
    read(X);
    X
)
.


pub Exit() :: ( halt; ).

pub Replace(List : list ,Idx : int ,NewVal) :: (

    if ListSize <- std:Size(List) | Idx < 0 ; Idx > ListSize - 1 then (
        write('Wrong Idx');
        Exit();
    );

    if Idx = 0 then (
        match List {
            [] => [],
            [L | Ls] => [NewVal | Ls]
        }
    ) else (
        List <- [L | Ls]; 
        [L | Replace(Ls,Idx - 1, NewVal)]
    )
)
.



pub Max(X : num, Y : num) :: (
    if #1 >= #2 then #1 else #2 
)
.

pub Min(X : num, Y : num) :: (
    if #2 >= #1 then #1 else #2 
)
.

pub MinMember(List : list, MinFunc) :: (
    match List {
        [] => nil,
        [X] => X,
        [X,Y] => MinFunc(X,Y),
        [L | Ls] => MinFunc(MinMember(Ls,MinFunc),L)
    }
)
.

pub RandomNum(Lower : num, Higher : num) :: (
    random(Lower,Higher,X);
    X
)
.

pub MakeList(Length : int, Value) :: (
    length(List,Length);
    maplist(=(Value),List);
    List
)
.

pub SortList(List : std:list) :: (
    msort(List,Result);
    Result
)
.


}

list(X) :- is_list(X).
num(X) :- number(X).
int(X) :- integer(X).
double(X) :- float(X).
str(X) :- string(X).


